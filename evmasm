#!/usr/bin/env python
import argparse
import sys
import binascii

from pyevmasm import EVMAsm

def main():
    parser = argparse.ArgumentParser(description="pyevmasm the EVM assembler and disassembler")
    parser.add_argument('-a','--assemble', action='store_true', help='Assemble EVM instructions to opcodes')
    parser.add_argument('-d', '--disassemble', action='store_true', help='Disassemble EVM to opcodes')
    parser.add_argument('-i', '--input', nargs='?', type=argparse.FileType('r'), default=sys.stdin, help='Input file, default=stdin')
    parser.add_argument('-o', '--output', nargs='?', type=argparse.FileType('w'), default=sys.stdout, help='Output file, default=stdout')

    args = parser.parse_args(sys.argv[1:])
    if args.assemble and args.disassemble:
        print("You cannot both assemble and disassemble at the same time.")
        sys.exit(1)

    if not args.assemble and not args.disassemble:
        args.disassemble = True

    if args.assemble:
        asm = args.input.read().strip().rstrip()
        args.output.write(EVMAsm.assemble_hex(asm) + "\n")
        #insns = list(EVMAsm.assemble_all(asm))
        #for i in insns:
        #    args.output.write(i)

    if args.disassemble:
        buf = args.input.read().strip().rstrip()
        if buf[:3] == 'EVM': # binja prefix
            buf = buf[3:]
        elif buf[:2] == '0x': # hex prefixed
            buf = binascii.unhexlify(buf[2:])
        else: # detect all hex buffer
            buf_set = set()
            for c in buf:
                buf_set.add(c.lower())

            hex_set = set(list('0123456789abcdef'))
            if buf_set <= hex_set: # subset
                buf = binascii.unhexlify(buf)
        
        insns = list(EVMAsm.disassemble_all(buf))
        for i in insns:
            args.output.write(str(i) + "\n")

if __name__ == "__main__":
    main()

